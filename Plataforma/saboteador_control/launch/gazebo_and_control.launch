 <launch>
 


        
  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="world_name" default="$(find saboteador_gazebo)/worlds/empty.world"/>
  <arg name="x_pos" default="0.0"/>
  <arg name="y_pos" default="0.0"/>
  <arg name="z_pos" default="0.0"/>

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(arg world_name)"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

  <!-- Load the URDF into the ROS Parameter Server -->
  <param name="saboteador/robot_description"
    command="$(find xacro)/xacro '$(find saboteador_description)/urdf/saboteador.urdf.xacro'"/>

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
    args="-urdf -model saboteador -param /saboteador/robot_description -x $(arg x_pos) -y $(arg y_pos) -z $(arg z_pos) "/>
    
    
    
  
    <rosparam command="load"
   file="$(find saboteador_control)/config/pid.yaml"/>  
    
  <rosparam command="load"
      file="$(find saboteador_control)/config/saboteador_control.yaml"/>


          
  
  <!-- load the controllers -->
  <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
       output="screen" ns="saboteador" args="joint_state_controller
                                            mobile_base_controller"/>


  <!-- convert joint states to TF transforms for rviz, etc -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
      ns="saboteador" respawn="false" output="screen">
      <remap from="/joint_states" to="/saboteador/joint_states" />
      <!-- param name="publish_frequency" type="double" value="30.0" /-->
  </node>

  <node name="rqt_robot_steering" pkg="rqt_robot_steering" type="rqt_robot_steering">
      <param name="default_topic" value="/saboteador/mobile_base_controller/cmd_vel"/>
  </node>   
    
  

    
</launch>
